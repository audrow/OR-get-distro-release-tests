import endent from 'endent'
import fs from 'fs'
import yaml from 'js-yaml'
import {basename, join} from 'path'
import * as XLSX from 'xlsx'
import {validateRequirementsYaml} from '../src/requirements/generator/utils'
import type Link from '../src/requirements/__types__/Link'
import type Requirement from '../src/requirements/__types__/Requirement'

type Test = {title: string; live?: string; source?: string}
type TestGroups = {[groupName: string]: Test[]}

function getTestsFromXlsxSheet({
  firstDataRow,
  inputFilePath,
}: {
  firstDataRow: number
  inputFilePath: string
}) {
  const xlsxFile = XLSX.readFile(inputFilePath)
  if (xlsxFile.SheetNames.length !== 1) {
    throw new Error(`Expected exactly one sheet in ${inputFilePath}`)
  }

  const sheetName = xlsxFile.SheetNames[0]
  const rawSheet = xlsxFile.Sheets[sheetName]
  const numberOfRows = XLSX.utils.sheet_to_json(rawSheet, {header: 1}).length

  const output: TestGroups = {}
  let section: string | null = null

  for (let i = firstDataRow; i <= numberOfRows; i++) {
    const title: string | undefined = rawSheet['A' + i].v
    const live: string | undefined =
      rawSheet['B' + i]?.f || rawSheet['B' + i]?.l.Rel.Type
    const source: string | undefined =
      rawSheet['C' + i]?.f || rawSheet['C' + i]?.l.Rel.Type

    if (title) {
      if (!live && !source) {
        section = title
      } else {
        if (!section) {
          throw new Error(`No section found for row ${i}`)
        }
        if (!output[section]) {
          output[section] = []
        }
        output[section].push({
          title: `${section}: ${title}`,
          live: extractUrl(live) || combineWithTitleName(live, title),
          source: extractUrl(source) || combineWithTitleName(source, title),
        })
      }
    } else {
      throw new Error(`No title found for row ${i}`)
    }
  }
  return output
}

function extractUrl(text: string | undefined) {
  if (!text) {
    return undefined
  }

  // If value is already a url
  if (text.startsWith('http')) {
    return text
  }

  const match = text.match(/HYPERLINK\("(.+)", ".+"\)/)
  if (!match) {
    return undefined
  }
  return match[1]
}

function combineWithTitleName(text: string | undefined, title: string) {
  if (!text) {
    return undefined
  }
  const match = text.match(
    /HYPERLINK\(CONCATENATE\("(.+)",\s*([A-Z]+[0-9]+)\),\s*".+"\)/,
  )
  if (!match) {
    return undefined
  }
  return match[1] + title
}

function getRequirementsYaml(tests: TestGroups, labels: string[]) {
  const requirements: Requirement[] = []
  for (const label of labels) {
    const labelTests = tests[label] || []
    for (const test of labelTests) {
      const links: Link[] = []
      if (test.live) {
        links.push({
          name: 'Live',
          url: test.live,
        })
      }
      if (test.source) {
        links.push({
          name: 'Source',
          url: test.source,
        })
      }
      requirements.push({
        name: test.title,
        links,
        checks: [
          {
            name: 'Seems correct',
          },
        ],
        labels: [label, 'Garden'],
      })
    }
  }
  const requirements_ = {
    requirements: requirements,
  }
  validateRequirementsYaml(requirements_)
  return yaml.dump(requirements_)
}

function main() {
  const inputFilePath = join(__dirname, 'gazebo-fortress-testing.xlsx')
  const outputFile = join(
    __dirname,
    '..',
    'requirements',
    'gazebo-requirements.yaml',
  )
  const firstDataRow = 3
  // let labels = ['General tutorials', 'Gazebo Worlds']
  let labels: string[] = []

  const tests = getTestsFromXlsxSheet({
    firstDataRow,
    inputFilePath,
  })

  if (labels.length === 0) {
    labels = Object.keys(tests)
  }
  const yaml_ = getRequirementsYaml(tests, labels)
  const outputText = endent`
    # This requirements file is not perfect but it should be a useful starting point.
    # It is intended to be copied into the saved requirements directory and then modified.
    #
    # This file was generated by '${basename(__filename)}'
    # with data from '${basename(inputFilePath)}'.

    ${yaml_}
  `
  fs.writeFileSync(outputFile, outputText)
}

if (typeof require !== 'undefined' && require.main === module) {
  main()
}
